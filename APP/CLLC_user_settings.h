#ifndef CLLC_USER_SETTINGS_H
#define CLLC_USER_SETTINGS_H


//
// CLLC LAB
// Power Flow Prim -> Sec
// 1 -> Open loop check for PWM drivers,
// 2 -> Open loop check for PWM drivers with protection,
// 3 -> Closed loop check with resistive load, direct frequency control,
// 4 -> Closed loop check with resistive load, time shift control,
// Power Flow Sec -> Prim
// 5 -> Open loop check for PWM driver,
// 6 -> Open loop check for PWM driver with protection,
// 7 -> Closed loop voltage with resistive load, time shift control,
//

#define CLLC_LAB 2

#if CLLC_LAB == 1
#define CLLC_CONTROL_MODE CLLC_DIR_FEEQ_CTRL
#define CLLC_POWER_FLOW CLLC_POWER_FLOW_PRIM_SEC
#define CLLC_INCR_BUILD CLLC_OPEN_LOOP_BUILD
#define CLLC_PROTECTION CLLC_PROTECTION_DISABLED
#define CLLC_SFRA_TYPE 0
// #define CLLC_SFRA_AMPLITUDE (float32_t) CLLC_SFRA_INJECTION_AMPLITUDE_LEVEL2 

#endif

#if CLLC_LAB == 2
#define CLLC_CONTROL_MODE CLLC_DIR_FEEQ_CTRL
#define CLLC_POWER_FLOW CLLC_POWER_FLOW_PRIM_SEC
#define CLLC_INCR_BUILD CLLC_OPEN_LOOP_BUILD
#define CLLC_PROTECTION CLLC_PROTECTION_ENABLED
#define CLLC_SFRA_TYPE 0
#define CLLC_SFRA_AMPLITUDE (float32_t) CLLC_SFRA_INJECTION_AMPLITUDE_LEVEL2
#endif

#if CLLC_LAB == 3
#define CLLC_CONTROL_MODE CLLC_DIR_FEEQ_CTRL
#define CLLC_POWER_FLOW CLLC_POWER_FLOW_PRIM_SEC
#define CLLC_INCR_BUILD CLLC_CLOSED_LOOP_BUILD
#define CLLC_CONTROL_MODE CLLC_VOLTAGE_MODE
#define CLLC_PROTECTION CLLC_PROTECTION_ENABLED
#define CLLC_SFRA_TYPE 0
#define CLLC_SFRA_AMPLITUDE (float32_t) CLLC_SFRA_INJECTION_AMPLITUDE_LEVEL1
#endif

#if CLLC_LAB == 4
#define CLLC_CONTROL_MODE CLLC_TIME_SHIF_CTRL
#define CLLC_POWER_FLOW CLLC_POWER_FLOW_PRIM_SEC
#define CLLC_INCR_BUILD CLLC_CLOSED_LOOP_BUILD
#define CLLC_CONTROL_MODE CLLC_CURRENT_MODE
#define CLLC_PROTECTION CLLC_PROTECTION_ENABLED
#define CLLC_SFRA_TYPE 0
#define CLLC_SFRA_AMPLITUDE (float32_t) CLLC_SFRA_INJECTION_AMPLITUDE_LEVEL1
#endif

#if CLLC_LAB == 5
#define CLLC_CONTROL_MODE CLLC_DIR_FEEQ_CTRL
#define CLLC_POWER_FLOW CLLC_POWER_FLOW_SEC_PRIM
#define CLLC_INCR_BUILD CLLC_OPEN_LOOP_BUILD
#define CLLC_CONTROL_MODE CLLC_VOLTAGE_MODE
#define CLLC_PROTECTION CLLC_PROTECTION_DISABLED
#define CLLC_SFRA_TYPE 0
#define CLLC_SFRA_AMPLITUDE (float32_t) CLLC_SFRA_INJECTION_AMPLITUDE_LEVEL2
#endif

#if CLLC_LAB == 6
#define CLLC_CONTROL_MODE CLLC_DIR_FEEQ_CTRL
#define CLLC_POWER_FLOW CLLC_POWER_FLOW_SEC_PRIM
#define CLLC_INCR_BUILD CLLC_OPEN_LOOP_BUILD
#define CLLC_CONTROL_MODE CLLC_VOLTAGE_MODE
#define CLLC_PROTECTION CLLC_PROTECTION_ENABLED
#define CLLC_SFRA_TYPE 0
#define CLLC_SFRA_AMPLITUDE (float32_t) CLLC_SFRA_INJECTION_AMPLITUDE_LEVEL2
#endif

#if CLLC_LAB == 7
#define CLLC_CONTROL_MODE CLLC_TIME_SHIF_CTRL
#define CLLC_POWER_FLOW CLLC_POWER_FLOW_SEC_PRIM
#define CLLC_INCR_BUILD CLLC_CLOSED_LOOP_BUILD
#define CLLC_CONTROL_MODE CLLC_VOLTAGE_MODE
#define CLLC_PROTECTION CLLC_PROTECTION_ENABLED
#define CLLC_SFRA_TYPE 0
#define CLLC_SFRA_AMPLITUDE (float32_t) CLLC_SFRA_INJECTION_AMPLITUDE_LEVEL1
#endif


//DEBUG
#define DEBUG1_TRACE_IN GPIO_writePin(DEBUG1,1)
#define DEBUG1_TRACE_OUT GPIO_writePin(DEBUG1,0)

#define DEBUG2_TRACE_IN GPIO_writePin(DEBUG2,1)
#define DEBUG2_TRACE_OUT GPIO_writePin(DEBUG2,0)

//第一相
#define CLLC_PRIM_LEGA_PWM_BASE EPWM4_BASE
#define CLLC_PRIM_LEGB_PWM_BASE EPWM3_BASE
#define CLLC_SEC_LEGA_PWM_BASE EPWM2_BASE
#define CLLC_SEC_LEGB_PWM_BASE EPWM1_BASE

//第二相
#define CLLC_PRIM_LEGC_PWM_BASE EPWM7_BASE
#define CLLC_PRIM_LEGD_PWM_BASE EPWM8_BASE
#define CLLC_SEC_LEGC_PWM_BASE EPWM5_BASE
#define CLLC_SEC_LEGD_PWM_BASE EPWM6_BASE

#define USE_FAN_AUTO_CONTROL 0  //默认由算法控制风扇


//
// Signals mapped to ADC -A
//
#define CLLC_IPRIM_TANK_MAIN_ADC_MODULE ADCA_BASE
#define CLLC_IPRIM_TANK_MAIN_ADC_SOC_NO ADC_SOC_NUMBER0
#define CLLC_IPRIM_TANK_MAIN_ADCRESULTREGBASE ADCARESULT_BASE // A2-I_PRIM_TANK1

#define CLLC_ISEC_MAIN_ADC_MODULE  ADCA_BASE
#define CLLC_ISEC_MAIN_ADC_SOC_NO  ADC_SOC_NUMBER1
#define CLLC_ISEC_MAIN_ADCRESULTREGBASE ADCARESULT_BASE// A3-I_SEC1

#define CLLC_IPRIM_MAIN_ADC_MODULE  ADCA_BASE
#define CLLC_IPRIM_MAIN_ADC_SOC_NO  ADC_SOC_NUMBER2
#define CLLC_IPRIM_MAIN_ADCRESULTREGBASE ADCARESULT_BASE// A4-I_PRIM1

#define CLLC_IPRIM_MAIN_ADCREAD ADC_readResult(CLLC_IPRIM_MAIN_ADCRESULTREGBASE, CLLC_IPRIM_MAIN_ADC_SOC_NO)
#define CLLC_ISEC_MAIN_ADCREAD ADC_readResult(CLLC_ISEC_MAIN_ADCRESULTREGBASE, CLLC_ISEC_MAIN_ADC_SOC_NO)
#define CLLC_IPRIM_TANK_MAIN_ADCREAD ADC_readResult(CLLC_IPRIM_TANK_MAIN_ADCRESULTREGBASE, CLLC_IPRIM_TANK_MAIN_ADC_SOC_NO)


//
// Signals mapped to ADC -B
//
#define CLLC_VPRIM_ADC_MODULE ADCB_BASE
#define CLLC_VPRIM_ADC_SOC_NO ADC_SOC_NUMBER0
#define CLLC_VPRIM_ADCRESULTREGBASE ADCBRESULT_BASE // B0-V_PRIM

#define CLLC_IPRIM_TANK_SECONDARY_ADC_MODULE ADCB_BASE
#define CLLC_IPRIM_TANK_SECONDARY_ADC_SOC_NO ADC_SOC_NUMBER1
#define CLLC_IPRIM_TANK_SECONDARY_ADCRESULTREGBASE ADCBRESULT_BASE // B1-I_PRIM_TANK2

#define CLLC_ISEC_TANK_MAIN_ADC_MODULE ADCB_BASE
#define CLLC_ISEC_TANK_MAIN_ADC_SOC_NO ADC_SOC_NUMBER2
#define CLLC_ISEC_TANK_MAIN_ADCRESULTREGBASE ADCBRESULT_BASE // B2-I_SEC_TANK1

#define CLLC_IPRIM_SECONDARY_ADC_MODULE ADCB_BASE
#define CLLC_IPRIM_SECONDARY_ADC_SOC_NO ADC_SOC_NUMBER3
#define CLLC_IPRIM_SECONDARY_ADCRESULTREGBASE ADCBRESULT_BASE // B3-I_PRIM2

#define CLLC_VPRIM_ADCREAD ADC_readResult(CLLC_VPRIM_ADCRESULTREGBASE, CLLC_VPRIM_ADC_SOC_NO)
#define CLLC_IPRIM_TANK_SECONDARY_ADCREAD ADC_readResult(CLLC_IPRIM_TANK_SECONDARY_ADCRESULTREGBASE, CLLC_IPRIM_TANK_SECONDARY_ADC_SOC_NO)
#define CLLC_ISEC_TANK_MAIN_ADCREAD ADC_readResult(CLLC_ISEC_TANK_MAIN_ADCRESULTREGBASE, CLLC_ISEC_TANK_MAIN_ADC_SOC_NO)
#define CLLC_IPRIM_SECONDARY_ADCREAD ADC_readResult(CLLC_IPRIM_SECONDARY_ADCRESULTREGBASE, CLLC_IPRIM_SECONDARY_ADC_SOC_NO)

//
// Signals mapped to ADC -C
//
#define CLLC_VSEC_ADC_MODULE ADCC_BASE
#define CLLC_VSEC_ADC_SOC_NO ADC_SOC_NUMBER0
#define CLLC_VSEC_ADCRESULTREGBASE ADCCRESULT_BASE // C0-V_SEC

#define CLLC_ISEC_TANK_SECONDARY_ADC_MODULE ADCC_BASE
#define CLLC_ISEC_TANK_SECONDARY_ADC_SOC_NO ADC_SOC_NUMBER1
#define CLLC_ISEC_TANK_SECONDARY_ADCRESULTREGBASE ADCCRESULT_BASE // C1-I_SEC_TANK2

#define CLLC_ISEC_SECONDARY_ADC_MODULE ADCC_BASE
#define CLLC_ISEC_SECONDARY_ADC_SOC_NO ADC_SOC_NUMBER2
#define CLLC_ISEC_SECONDARY_ADCRESULTREGBASE ADCCRESULT_BASE // C2-I_SEC2

#define CLLC_VSEC_ADCREAD ADC_readResult(CLLC_VSEC_ADCRESULTREGBASE, CLLC_VSEC_ADC_SOC_NO)
#define CLLC_ISEC_TANK_SECONDARY_ADCREAD ADC_readResult(CLLC_ISEC_TANK_SECONDARY_ADCRESULTREGBASE, CLLC_ISEC_TANK_SECONDARY_ADC_SOC_NO)
#define CLLC_ISEC_SECONDARY_ADCREAD ADC_readResult(CLLC_ISEC_SECONDARY_ADCRESULTREGBASE, CLLC_ISEC_SECONDARY_ADC_SOC_NO)

//
// 中断频率定义
//
// #define CLLC_ISR1_FREQUENCY_HZ  ((float32_t)10000)
// #define CLLC_ISR2_FREQUENCY_HZ  ((float32_t)10000)
#define CLLC_ISR2_FREQUENCY_HZ ((float32_t)89000)

//
//CPU time related
//
#define CLLC_TASKC_CPUTIMER_BASE CPUTIMER0_BASE
#define CLLC_TASKA_CPUTIMER_BASE CPUTIMER1_BASE
#define CLLC_TASKB_CPUTIMER_BASE CPUTIMER2_BASE

#define CLLC_TASKA_FREQ_HZ 2000
#define CLLC_TASKB_FREQ_HZ 100
#define CLLC_TASKC_FREQ_HZ CLLC_ISR2_FREQUENCY_HZ

#define CLLC_GET_TASKA_TIMER_OVERFLOW_STATUS CPUTimer_getTimerOverflowStatus(CLLC_TASKA_CPUTIMER_BASE)
#define CLLC_CLEAR_TASKA_TIMER_OVERFLOW_FLAG CPUTimer_clearOverflowFlag(CLLC_TASKA_CPUTIMER_BASE)

#define CLLC_GET_TASKB_TIMER_OVERFLOW_STATUS CPUTimer_getTimerOverflowStatus(CLLC_TASKB_CPUTIMER_BASE)
#define CLLC_CLEAR_TASKB_TIMER_OVERFLOW_FLAG CPUTimer_clearOverflowFlag(CLLC_TASKB_CPUTIMER_BASE)

// EPWM

#define CLLC_EPWM_NOMAL_DEADBAND_TICKS 80
#define CLLC_EPWM_DISABLE_DEADBAND_TICKS 2000


#endif // CLLC_USER_SETTINGS_H
